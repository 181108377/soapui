<?xml version="1.0" encoding="UTF-8"?>
	<!--
		~ soapUI, copyright (C) 2004-2008 eviware.com ~ ~ soapUI is free
		software; you can redistribute it and/or modify it under the ~ terms
		of version 2.1 of the GNU Lesser General Public License as published
		by ~ the Free Software Foundation. ~ ~ soapUI is distributed in the
		hope that it will be useful, but WITHOUT ANY WARRANTY; without ~ even
		the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
		PURPOSE. ~ See the GNU Lesser General Public License for more details
		at gnu.org.
	-->


<document>
	<properties>
		<title>Tutorial for AMF Test Step</title>
	</properties>
	<body>
		<section name="Getting started with JMS testing in soapUI 3.5">

			<subsection name="Introduction">
				<p>
					In soapUI 3.5 we introduce support for JMS messaging allowing you to send and receive both text and binary messages. 
					For this purpose SoapUI integrates with the HermesJMS open source application which	supports many different	JMS providers. 
					
					<a href="http://www.hermesjms.org"><img src="http://hermesjms.com/confluence/download/userResources/HJMS/logo" align="right"></img></a>
				</p>

				<p>
					For the purpose of this tutorial we will need to download the new SoapUI
					3.5 installer which integrates the installer of HermesJMS. 
				</p>
			</subsection>


			<subsection name="Installing soapUI 3.5">
				<p>
					When starting the new soapUI installer you will get an option that you can
					select to install HermesJMS also. This is mandatory if you want to
					try this tutorial (unless you already have HermesJMS 1.13 or later installed).
				</p>

			</subsection>


			<subsection name="Downloading ActiveMQ and starting the server">
				<p>
					Also for the purpose of this tutorial we will need ActiveMQ (a free JMS implementation). 
					Download it from the server	<a href="http://activemq.apache.org/activemq-520-release.html">here</a>
					. Unpack it and start activemq.bat file under bin folder. This will	start activemq server on your local machine.
				</p>

			</subsection>


			<subsection name="Setting HermesJMS sessions">
				<p>
					For purpose of this tutorial we will create one session in HermesJMS.
				</p>
				<p align="center">
					<img src="images/create_hermes_session_button.gif" alt="Create session in Hermes button" />
				</p>

				<p>
					Open the Preferences editor and choose the Providers tab first at the bottom.
					Select Classpath Groups on the right and choose	'Add Group', type the name 'ActiveMQ-5.2'
				</p>
				<p>
					Than add these two jar files also by clicking on 'Add JAR(s)',
					activemq-core-5.2.0.jar and geronimo-j2ee-management_1.0_spec-1.0.jar.
					(These jar files can be	found in %actvemq_home%/lib folder).
				</p>
				<p>
					Now choose the session tab in HermesJMS and make sure that your editor looks like this.
				</p>
				<p align="center">
					<img src="images/hermes_preferences.gif" alt="Hermes Preferences" />
				</p>
				<p>
					We have now created a session in HermesJMS named activeMQSession with two queues and two topics which 
					we can use from within soapUI.
				</p>
			</subsection>
			
			<subsection name="JMS in soapUI">
				<p>
				Now that we have configured our session in HermesJMS, lets go back to soapUI and use the sample project that goes with 
				the soapUI installation %soapui_home%/Tutorials/sample-soapui-project.xml
				</p>
				<p>
					Open the project and left click on interface SampleServiceSoapBinding and choose 'Add JMS Endpoint'
				</p>
				<p>
					The following popup dialog will open
				</p>
				<p align="center">
					<img src="images/add_jms_endpoint.gif" alt="Add JMS Endpoints" />
				</p>
				<p>
					First set the Hermes Config path to the folder where hermes-config.xml is (usually .Hermes),
					than select the above configured session and last the queue/topic for sending/publishing and queue/topic
					for receiving/subscribing. You can choose send/publish only by leaving
					Receive Queue field blank and also receive/subscribe only by leaving
					Send Queue/Topic blank. All combinations are allowed. Available queues
					and topics depend on what we have configured in HermesJMS, so if we
					add another queue for example it will be available in this combo box also.
					You can add as many JMS endpoints this way as you need.
				</p>
				<p>
					Next we need to create a new TestSuite and TestCase and add a Soap TestRequest.
					Select the operation to invoke (for example the Request login), which opens the editor with a corresponding default
					message. Select an endpoint where the send queue and receive queues are the same and submit the request.

				</p>
				<p align="center">
					<img src="images/jms_request_and_response.gif" alt="JMS Request and Response" />
				</p>
				<p>
				As you can see, the message we sent is shown in the response window since we sent and received from the same JMS
				queue (for the purpose of this example). We can also see that the response has a JMS inspector showing all JMS Headers. 
				</p>
				<p>
					You can of course also set custom JMS Headers and JMS Properties for your request;
				</p>
				<p align="center">
					<img src="images/jms_request_and_hedears.gif" alt="JMS Request with Headers" />
				</p>
				<p align="center">
					<img src="images/jms_request_and_properties.gif" alt="JMS Request with Properties" />
				</p>
				<p>
					Another important thing to set is the Timeout property
				</p>
				<p align="center">
					<img src="images/timeout.gif" alt="Timeout" />
				</p>
				<p>
					where you set the time to wait ( in milliseconds ) for the receiving/subscribing queue/topic.
					If this is not set or set to zero it will wait to infinity. 
				</p>
				<p>
					Since the response is a standard XML message, all XML-related assertions apply (XPath, XQuery, etc), but 
					also two new assertions are available for JMS testing; JMS Status and JMS Timeout.
					The JMS Status assertion will check for JMS specific errors (for example connection errors)
					and the JMS Timeout assertion will check that the message is received within the configured timeout.
				</p>
				<p>
					The method described above allows us to  send/publish and receive/subscribe jms text messages, but 
					we can also use the first request attachment to specify the payload of the message; if the content type of 
					the attachment is text, plain or xml then this attachment will be sent as a text message, otherwise it 
					will be sent as bytes message. Correspondingly, when receiving a bytes message its payload will be shown as 
					a response attachment..
				</p>
				<p>
					Note that only the first attachment is treated as the payload for the message.  
				</p>
				<p>
					That's it for now, we hope that you will find this tutorial helpful to jump start your JMS testing with soapUI.
				</p>
				<p>
					Happy testing, and please don't hesitate to give us your feedback!
				</p>
			</subsection>
		</section>
	</body>
</document>

/*
 *  soapUI, copyright (C) 2004-2011 smartbear.com
 *
 *  soapUI is free software; you can redistribute it and/or modify it under the
 *  terms of version 2.1 of the GNU Lesser General Public License as published by
 *  the Free Software Foundation.
 *  For the avoidance of doubt, eviware elects not to use any
 *  later versions of the LGPL License.
 *  soapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 *  even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU Lesser General Public License for more details at gnu.org.
 *
 *
 *  -------------------------------------------------------------------------------------
 *  If soapUI is distributed with products from Sun, note the following:
 *  -------------------------------------------------------------------------------------
 *
 *  For the avoidance of doubt, except that if any license choice other than
 *  GPL or LGPL is available it will apply instead,
 *  Sun elects to use only the General Public License version 2 (GPLv2) at
 *  this time for any software where a choice of GPL
 *  license versions is made available with the language indicating that
 *  GPLv2 or any later version may be used, or where a
 *  choice of which version of the GPL is applied is otherwise unspecified.
 */
package com.eviware.soapui.netbeans.module;

import com.eviware.soapui.SoapUI;
import java.awt.BorderLayout;
import java.io.Serializable;
import javax.swing.JComponent;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
final class LogTopComponent extends TopComponent {
    
    private static LogTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    
    private static final String PREFERRED_ID = "LogTopComponent";

    static void ensureOpen( boolean requestActive ) {
        TopComponent win = LogTopComponent.findInstance();
        win.open();
        if( requestActive )
            win.requestActive();
    }
    private LogTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(LogTopComponent.class, "CTL_LogTopComponent"));
        setToolTipText(NbBundle.getMessage(LogTopComponent.class, "HINT_LogTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        
        JComponent logComponent = SoapUI.getLogMonitor() == null ? null : SoapUI.getLogMonitor().getComponent();
        if( logComponent != null )
            add( logComponent, BorderLayout.CENTER  );
        else
            SoapUI.log.warn("Missing soapUI logMonitor for log");
    }
    
    @Override
    public void open() {
     Mode m = WindowManager.getDefault().findMode ("output");
     if (m != null) {
        m.dockInto(this);
     }
     super.open();
  } 
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized LogTopComponent getDefault() {
        if (instance == null) {
            instance = new LogTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the LogTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized LogTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Log component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof LogTopComponent) {
            return (LogTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return LogTopComponent.getDefault();
        }
    }
    
}

/*
 *  soapUI, copyright (C) 2004-2011 smartbear.com 
 *
 *  soapUI is free software; you can redistribute it and/or modify it under the 
 *  terms of version 2.1 of the GNU Lesser General Public License as published by 
 *  the Free Software Foundation.
 *
 *  soapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without 
 *  even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 *  See the GNU Lesser General Public License for more details at gnu.org.
 */

package com.eviware.x.impl.swt;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

import com.eviware.soapui.impl.wsdl.WsdlInterface;
import com.eviware.soapui.support.types.StringToStringMap;

public class SwtNamespaceTable extends AbstractSwtXFormField<Table>
{
   private final static Logger log = Logger.getLogger(SwtNamespaceTable.class);

   private static final int NAMESPACE_COLUMN = 0;
	private static final int PACKAGE_COLUMN = 1;
   
   private List<String> namespaces;
   private List<String> packages;

   private Table table;

	@SuppressWarnings("unchecked")
   public SwtNamespaceTable(Composite panel, WsdlInterface iface)
	{
		super();
      
      table = new Table( panel, SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL );
      
      table.setHeaderVisible(true);
      GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
      gridData.horizontalSpan = 2;
      table.setLayoutData(gridData);

      TableColumn column1 = new TableColumn(table, SWT.CENTER);
      column1.setText("Namespace");
      
      TableColumn column2 = new TableColumn(table, SWT.CENTER);
      column2.setText("Package");
      
      try
      {
         Collection<String> ifaceNamespaces = iface.getWsdlContext().getDefinition().getNamespaces().values();
         namespaces = new ArrayList<String>(ifaceNamespaces);
         packages = new ArrayList<String>(Arrays.asList(new String[namespaces.size()]));
         for(int i = 0; i < namespaces.size(); i++)
         {
            String namespace = namespaces.get(i);
            String pack = packages.get(i);
            TableItem item = new TableItem(table, SWT.NONE);
            item.setText(new String[] { namespace, pack != null ? pack : "" } );
         }
      }
      catch(Exception e)
      {
         // TODO Eclipse wstools: Got FileNotFoundException: C:\soapui\runtime-EclipseApplication\wstools-test\gen\wsdl\MyServiceImpl.wsdl
         //      when I selected 'Implement' on a file that was generated by 'Publish as Web Service' (after restart)
         //      The file was actually in the WEB-INF sub-directory.
         log.error("Could not get namespaces", e);
         throw new RuntimeException("Could not get namespaces", e);
      }
      column1.pack();
      column2.pack();
      
      // TODO Eclipse: The package name in the table is centered, should be left.
      // TODO Eclipse: Can only edit package name by selecting namespace.
      final TableEditor editor = new TableEditor(table);
      editor.horizontalAlignment = SWT.LEFT;
      editor.grabHorizontal = true;
      editor.minimumWidth = 50;
      table.addSelectionListener(new SelectionAdapter()
      {
         @Override
         public void widgetSelected(SelectionEvent e)
         {
            // Clean up any previous editor control
            Control oldEditor = editor.getEditor();
            if(oldEditor != null)
               oldEditor.dispose();
            
            TableItem item = (TableItem) e.item;
            if(item == null)
               return;
            
            Text newEditor = new Text(table, SWT.NONE);
            newEditor.setText(item.getText(PACKAGE_COLUMN));
            newEditor.addModifyListener(new ModifyListener()
            {
               public void modifyText(ModifyEvent e)
               {
                  Text text = (Text) editor.getEditor();
                  editor.getItem().setText(PACKAGE_COLUMN, text.getText());
               }
            });
            newEditor.selectAll();
            newEditor.setFocus();
            editor.setEditor(newEditor, item, PACKAGE_COLUMN);
         }
      });
	}

	public void setValue(String value)
	{
		setMappings( StringToStringMap.fromXml( value ) );
	}

	public String getValue()
	{
		return getMappings().toXml();
	}

   @Override
   public Table getComponent()
   {
      return table;
   }

	public void setMappings(StringToStringMap mapping)
	{
      if(namespaces == null)
         return;
      
		for( int c = 0; c < namespaces.size(); c++ )
		{
         String ns = namespaces.get(c);
			if( mapping.containsKey(ns))
			{
				packages.set( c, mapping.get(ns) );
			}
			else
			{
				packages.set( c, "" );
			}
			
			if( table != null )
			{
				TableItem item = table.getItem(c);
				if( item != null )
					item.setText( PACKAGE_COLUMN, packages.get( c ));
			}
		}
	}

	public StringToStringMap getMappings()
	{
		StringToStringMap result = new StringToStringMap();
      if(namespaces == null)
         return result;
       
      for(int i = 0; i < namespaces.size(); i++)
      {
         TableItem item = table.getItem(i);  // There is one TableItem for each row.
         String namespace = item.getText(NAMESPACE_COLUMN).trim();
         String pkg = item.getText(PACKAGE_COLUMN).trim();
         
         // FIXME What if pkg is an empty string? Is that causing the problem? -> yes.. probably!
         if( namespace.length() > 0 && pkg.length() > 0 )
         	result.put(namespace, pkg);
      }
		
		return result;
	}
}

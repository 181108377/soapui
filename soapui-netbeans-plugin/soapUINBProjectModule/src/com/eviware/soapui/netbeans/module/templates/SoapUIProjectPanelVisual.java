/*
 *  soapUI, copyright (C) 2004-2011 smartbear.com
 *
 *  soapUI is free software; you can redistribute it and/or modify it under the
 *  terms of version 2.1 of the GNU Lesser General Public License as published by
 *  the Free Software Foundation.
 *  For the avoidance of doubt, eviware elects not to use any
 *  later versions of the LGPL License.
 *  soapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 *  even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU Lesser General Public License for more details at gnu.org.
 *
 *
 *  -------------------------------------------------------------------------------------
 *  If soapUI is distributed with products from Sun, note the following:
 *  -------------------------------------------------------------------------------------
 *
 *  For the avoidance of doubt, except that if any license choice other than
 *  GPL or LGPL is available it will apply instead,
 *  Sun elects to use only the General Public License version 2 (GPLv2) at
 *  this time for any software where a choice of GPL
 *  license versions is made available with the language indicating that
 *  GPLv2 or any later version may be used, or where a
 *  choice of which version of the GPL is applied is otherwise unspecified.
 */

package com.eviware.soapui.netbeans.module.templates;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;

public class SoapUIProjectPanelVisual extends JPanel implements DocumentListener {
    
    public static final String PROP_PROJECT_NAME = "projectName";
    
    private SoapUIProjectWizardPanel panel;
    
    public SoapUIProjectPanelVisual(SoapUIProjectWizardPanel panel) {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        projectNameTextField.getDocument().addDocumentListener(this);
        projectLocationTextField.getDocument().addDocumentListener(this);
    }
    
    public String getProjectName() {
        return this.projectNameTextField.getText();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        projectLocationLabel = new javax.swing.JLabel();
        projectLocationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        testSuiteCheckBox = new javax.swing.JCheckBox();
        testSuiteLabel = new javax.swing.JLabel();
        wsdlLabel = new javax.swing.JLabel();
        mockServiceLabel = new javax.swing.JLabel();
        mockServiceCheckBox = new javax.swing.JCheckBox();
        wsdlTextField = new javax.swing.JTextField();
        wsdlBrowseButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        importProjectLabel = new javax.swing.JLabel();
        importTextField = new javax.swing.JTextField();
        importBrowseButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "jLabel2");

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, "Project &Name:");

        projectLocationLabel.setLabelFor(projectLocationTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectLocationLabel, "Project &Location:");

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, "Br&owse...");
        browseButton.setActionCommand("BROWSE");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        createdFolderLabel.setLabelFor(createdFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, "Project &Folder:");

        createdFolderTextField.setEditable(false);

        testSuiteCheckBox.setEnabled(false);
        testSuiteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testSuiteCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(testSuiteLabel, "Generate TestSuite?");
        testSuiteLabel.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(wsdlLabel, "Initial WSDL (URL/file):");

        org.openide.awt.Mnemonics.setLocalizedText(mockServiceLabel, "Generate MockService?");
        mockServiceLabel.setEnabled(false);

        mockServiceCheckBox.setEnabled(false);

        wsdlTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wsdlTextFieldMouseClicked(evt);
            }
        });
        wsdlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsdlTextFieldActionPerformed(evt);
            }
        });
        wsdlTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                wsdlTextFieldFocusLost(evt);
            }
        });
        wsdlTextField.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                wsdlTextFieldHierarchyChanged(evt);
            }
        });
        wsdlTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                wsdlTextFieldInputMethodTextChanged(evt);
            }
        });
        wsdlTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wsdlTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wsdlTextFieldKeyTyped(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(wsdlBrowseButton, "Browse...");
        wsdlBrowseButton.setActionCommand("BROWSE");
        wsdlBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsdlBrowseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(importProjectLabel, "Import existing soapUI Project:");

        org.openide.awt.Mnemonics.setLocalizedText(importBrowseButton, "Browse...");
        importBrowseButton.setActionCommand("BROWSE");
        importBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBrowseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mockServiceLabel)
                            .add(wsdlLabel)
                            .add(projectNameLabel)
                            .add(projectLocationLabel)
                            .add(createdFolderLabel)
                            .add(testSuiteLabel))
                        .add(4, 4, 4)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(wsdlTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, projectNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, createdFolderTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, projectLocationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(browseButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(wsdlBrowseButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, testSuiteCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                            .add(mockServiceCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(importProjectLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(importTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(importBrowseButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(projectNameLabel)
                    .add(projectNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(projectLocationLabel)
                    .add(browseButton)
                    .add(projectLocationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(createdFolderLabel)
                    .add(createdFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(wsdlLabel)
                    .add(wsdlBrowseButton)
                    .add(wsdlTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, testSuiteLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, testSuiteCheckBox))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(mockServiceLabel))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(mockServiceCheckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(importProjectLabel)
                    .add(importBrowseButton)
                    .add(importTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        testSuiteCheckBox.getAccessibleContext().setAccessibleName("testSuite");
        wsdlLabel.getAccessibleContext().setAccessibleName("wsdlLabel");
        mockServiceCheckBox.getAccessibleContext().setAccessibleName("mockService");
    }// </editor-fold>//GEN-END:initComponents
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            JFileChooser chooser = new JFileChooser();
            FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
            chooser.setDialogTitle(NbBundle.getMessage(SoapUIProjectPanelVisual.class, "SelectProjectLocationChooserTitle"));
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = this.projectLocationTextField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                projectLocationTextField.setText(FileUtil.normalizeFile(projectDir).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }
        
    }//GEN-LAST:event_browseButtonActionPerformed

    private void wsdlBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsdlBrowseButtonActionPerformed
         String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            JFileChooser chooser = new JFileChooser();
            FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
            chooser.setDialogTitle(NbBundle.getMessage(SoapUIProjectPanelVisual.class, "SelectWSDLFileChooserTitle"));
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            String path = this.wsdlTextField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File wsdlFile = chooser.getSelectedFile();
                wsdlTextField.setText(FileUtil.normalizeFile(wsdlFile).getAbsolutePath());
                enableCheckBoxes();
            }
            panel.fireChangeEvent();
        }
}//GEN-LAST:event_wsdlBrowseButtonActionPerformed

    private void testSuiteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testSuiteCheckBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_testSuiteCheckBoxActionPerformed

    private void wsdlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsdlTextFieldActionPerformed
       
    }//GEN-LAST:event_wsdlTextFieldActionPerformed

    private void wsdlTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wsdlTextFieldFocusLost
        // TODO add your handling code here:
        if ("".equals(this.wsdlTextField.getText().trim())){
            disableCheckBoxes();
        }
    }//GEN-LAST:event_wsdlTextFieldFocusLost

    private void wsdlTextFieldHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_wsdlTextFieldHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_wsdlTextFieldHierarchyChanged

    private void wsdlTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_wsdlTextFieldInputMethodTextChanged
        
    }//GEN-LAST:event_wsdlTextFieldInputMethodTextChanged

    private void wsdlTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wsdlTextFieldKeyPressed
  
    }//GEN-LAST:event_wsdlTextFieldKeyPressed

    private void wsdlTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wsdlTextFieldKeyTyped
        if (!mockServiceCheckBox.isEnabled())
            enableCheckBoxes();
       
    }//GEN-LAST:event_wsdlTextFieldKeyTyped

    private void wsdlTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wsdlTextFieldMouseClicked

    }//GEN-LAST:event_wsdlTextFieldMouseClicked

    private void importBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBrowseButtonActionPerformed
        // TODO add your handling code here:
         String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            JFileChooser chooser = new JFileChooser();
            FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
            chooser.setDialogTitle(NbBundle.getMessage(SoapUIProjectPanelVisual.class, "SelectSoapUIProjectFileChooserTitle"));
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            String path = this.importTextField.getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectFile = chooser.getSelectedFile();
                importTextField.setText(FileUtil.normalizeFile(projectFile).getAbsolutePath());
            }
            panel.fireChangeEvent();
        }
    }//GEN-LAST:event_importBrowseButtonActionPerformed
    
    
    private void disableCheckBoxes(){
            mockServiceLabel.setEnabled(false);
            mockServiceCheckBox.setEnabled(false);
            mockServiceCheckBox.setSelected(false);
            testSuiteLabel.setEnabled(false);
            testSuiteCheckBox.setEnabled(false);
            testSuiteCheckBox.setSelected(false);
        
    }
    
    private void enableCheckBoxes(){
            mockServiceLabel.setEnabled(true);
            mockServiceCheckBox.setEnabled(true);
            testSuiteLabel.setEnabled(true);
            testSuiteCheckBox.setEnabled(true);
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JButton importBrowseButton;
    private javax.swing.JLabel importProjectLabel;
    private javax.swing.JTextField importTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JCheckBox mockServiceCheckBox;
    private javax.swing.JLabel mockServiceLabel;
    private javax.swing.JLabel projectLocationLabel;
    private javax.swing.JTextField projectLocationTextField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JCheckBox testSuiteCheckBox;
    private javax.swing.JLabel testSuiteLabel;
    private javax.swing.JButton wsdlBrowseButton;
    private javax.swing.JLabel wsdlLabel;
    private javax.swing.JTextField wsdlTextField;
    // End of variables declaration//GEN-END:variables
    
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNameTextField.requestFocus();
    }
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        
        if (projectNameTextField.getText().length() == 0) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage",
                    NbBundle.getMessage(SoapUIProjectPanelVisual.class, "InvalidProjectNameError"));
            return false; // Display name not specified
        }
        File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
        if (!f.isDirectory()) {
            String message = NbBundle.getMessage(SoapUIProjectPanelVisual.class, "InvalidProjectFolderPathError");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
            return false;
        }
        final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
        
        File projLoc = destFolder;
        while (projLoc != null && !projLoc.exists()) {
            projLoc = projLoc.getParentFile();
        }
        if (projLoc == null || !projLoc.canWrite()) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage",
                    NbBundle.getMessage(SoapUIProjectPanelVisual.class, "FailedToCreateProjectFolderError"));
            return false;
        }
        
        if (FileUtil.toFileObject(projLoc) == null) {
            String message = NbBundle.getMessage(SoapUIProjectPanelVisual.class, "ProjectFolderIsInvalidPathError");
            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
            return false;
        }
        
        File[] kids = destFolder.listFiles();
        if (destFolder.exists() && kids != null && kids.length > 0) {
            // Folder exists and is not empty
            wizardDescriptor.putProperty("WizardPanel_errorMessage",
                    NbBundle.getMessage(SoapUIProjectPanelVisual.class, "ProjectFolderAlreadyExistsError"));
            return false;
        }
        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }
    
    void store(WizardDescriptor d) {
        String name = projectNameTextField.getText().trim();
        String folder = createdFolderTextField.getText().trim();
        String wsdl = wsdlTextField.getText().trim();
        String importProject = importTextField.getText().trim();
        Boolean generateMockService = mockServiceCheckBox.isSelected();
        Boolean generateTestSuite = testSuiteCheckBox.isSelected();
        
        d.putProperty("projdir", new File(folder));
        d.putProperty("name", name);
        d.putProperty("wsdl", wsdl); // could be file or url
        d.putProperty("generateMockService", generateMockService);
        d.putProperty("generateTestSuite", generateTestSuite);
        d.putProperty("importProject", new File(importProject));
        
    }
    
    void read(WizardDescriptor settings) {
        File projectLocation = (File) settings.getProperty("projdir");
        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
            projectLocation = ProjectChooser.getProjectsFolder();
        } else {
            projectLocation = projectLocation.getParentFile();
        }
        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
        
        String projectName = (String) settings.getProperty("name");
        if(projectName == null) {
            projectName = "WebServiceTestProject";
        }
        
        Boolean generateTestSuite = (Boolean) settings.getProperty("generateTestSuite");
        if (generateTestSuite == null)
                generateTestSuite = new Boolean(false);
        
        Boolean generateMockService = (Boolean) settings.getProperty("generateMockService");
        if (generateMockService == null)
                generateMockService = new Boolean(false);
        
        this.testSuiteCheckBox.setSelected(generateTestSuite);
        this.mockServiceCheckBox.setSelected(generateMockService);
        String wsdl = (String) settings.getProperty("wsdl");
        if(wsdl == null) {
            wsdl = "";
            disableCheckBoxes();
            
        }else {
           enableCheckBoxes();
        }
        this.projectNameTextField.setText(projectName);
        this.projectNameTextField.selectAll();
        this.wsdlTextField.setText(wsdl);
        String importProject = (settings.getProperty("importProject") == null)? "": ((File)settings.getProperty("importProject")).getAbsolutePath();
        this.importTextField.setText(importProject);
        
    }
    
    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }
    
    // Implementation of DocumentListener --------------------------------------
    
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME,null,this.projectNameTextField.getText());
        }
    }
    
    /** Handles changes in the Project name and project directory, */
    private void updateTexts(DocumentEvent e) {
        
        Document doc = e.getDocument();
        
        if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {
            // Change in the project name
            
            String projectName = projectNameTextField.getText();
            String projectFolder = projectLocationTextField.getText();
            
            //if (projectFolder.trim().length() == 0 || projectFolder.equals(oldName)) {
            createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);
            //}
            
        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }
    
}
